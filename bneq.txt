operands = (0, 0, 16, 0)
Memory xfer! host: 0 unified buffer: 0: length: 16 (FLAGS? 0)
  read host memory to unified buffer
PC = 1
operands = (16, 16, 16, 0)
Memory xfer! host: 16 unified buffer: 16: length: 16 (FLAGS? 0)
  read host memory to unified buffer
PC = 2
operands = (0, 0, 0, 0)
Memory xfer! host: 0 unified buffer: 0: length: 0 (FLAGS? 0)
  read weights from DRAM into MMU
PC = 3
operands = (0, 0, 16, 5)
Matrix things....
  UB@0 + 16 -> MMU -> accumulator@0 + 16
MMC input shape: (16, 16)
MMC matrix: 
[[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13  0  0  0]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13  1  0  0]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13  0  1  0]]
MMC weight: 
[[ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 10]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 -2]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0]]
MMC output shape: (16, 16)
MMC output: 
[[  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
Accumulator[0] = [[  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
PC = 4
operands = (0, 0, 0, 0)
Memory xfer! host: 0 unified buffer: 0: length: 0 (FLAGS? 0)
  read weights from DRAM into MMU
PC = 5
operands = (16, 0, 16, 1)
Matrix things....
  UB@16 + 16 -> MMU -> accumulator@0 + 16
MMC input shape: (16, 16)
MMC matrix: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
MMC weight: 
[[ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 10]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 -2]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0]]
MMC output shape: (16, 16)
MMC output: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Accumulator[0] = [[  2   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
PC = 6
operands = (0, 0, 16, 0)
ACTIVATE!
before = [[  2   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
after = [[  2   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
branch_neq: value = 10, branch pc diff = 254
PC = 4
operands = (0, 0, 0, 0)
Memory xfer! host: 0 unified buffer: 0: length: 0 (FLAGS? 0)
  read weights from DRAM into MMU
PC = 5
operands = (16, 0, 16, 1)
Matrix things....
  UB@16 + 16 -> MMU -> accumulator@0 + 16
MMC input shape: (16, 16)
MMC matrix: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
MMC weight: 
[[ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 10]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 -2]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0]]
MMC output shape: (16, 16)
MMC output: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Accumulator[0] = [[  3   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
PC = 6
operands = (0, 0, 16, 0)
ACTIVATE!
before = [[  3   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
after = [[  3   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
branch_neq: value = 10, branch pc diff = 254
PC = 4
operands = (0, 0, 0, 0)
Memory xfer! host: 0 unified buffer: 0: length: 0 (FLAGS? 0)
  read weights from DRAM into MMU
PC = 5
operands = (16, 0, 16, 1)
Matrix things....
  UB@16 + 16 -> MMU -> accumulator@0 + 16
MMC input shape: (16, 16)
MMC matrix: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
MMC weight: 
[[ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 10]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 -2]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0]]
MMC output shape: (16, 16)
MMC output: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Accumulator[0] = [[  4   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
PC = 6
operands = (0, 0, 16, 0)
ACTIVATE!
before = [[  4   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
after = [[  4   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
branch_neq: value = 10, branch pc diff = 254
PC = 4
operands = (0, 0, 0, 0)
Memory xfer! host: 0 unified buffer: 0: length: 0 (FLAGS? 0)
  read weights from DRAM into MMU
PC = 5
operands = (16, 0, 16, 1)
Matrix things....
  UB@16 + 16 -> MMU -> accumulator@0 + 16
MMC input shape: (16, 16)
MMC matrix: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
MMC weight: 
[[ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 10]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 -2]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0]]
MMC output shape: (16, 16)
MMC output: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Accumulator[0] = [[  5   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
PC = 6
operands = (0, 0, 16, 0)
ACTIVATE!
before = [[  5   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
after = [[  5   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
branch_neq: value = 10, branch pc diff = 254
PC = 4
operands = (0, 0, 0, 0)
Memory xfer! host: 0 unified buffer: 0: length: 0 (FLAGS? 0)
  read weights from DRAM into MMU
PC = 5
operands = (16, 0, 16, 1)
Matrix things....
  UB@16 + 16 -> MMU -> accumulator@0 + 16
MMC input shape: (16, 16)
MMC matrix: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
MMC weight: 
[[ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 10]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 -2]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0]]
MMC output shape: (16, 16)
MMC output: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Accumulator[0] = [[  6   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
PC = 6
operands = (0, 0, 16, 0)
ACTIVATE!
before = [[  6   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
after = [[  6   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
branch_neq: value = 10, branch pc diff = 254
PC = 4
operands = (0, 0, 0, 0)
Memory xfer! host: 0 unified buffer: 0: length: 0 (FLAGS? 0)
  read weights from DRAM into MMU
PC = 5
operands = (16, 0, 16, 1)
Matrix things....
  UB@16 + 16 -> MMU -> accumulator@0 + 16
MMC input shape: (16, 16)
MMC matrix: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
MMC weight: 
[[ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 10]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 -2]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0]]
MMC output shape: (16, 16)
MMC output: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Accumulator[0] = [[  7   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
PC = 6
operands = (0, 0, 16, 0)
ACTIVATE!
before = [[  7   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
after = [[  7   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
branch_neq: value = 10, branch pc diff = 254
PC = 4
operands = (0, 0, 0, 0)
Memory xfer! host: 0 unified buffer: 0: length: 0 (FLAGS? 0)
  read weights from DRAM into MMU
PC = 5
operands = (16, 0, 16, 1)
Matrix things....
  UB@16 + 16 -> MMU -> accumulator@0 + 16
MMC input shape: (16, 16)
MMC matrix: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
MMC weight: 
[[ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 10]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 -2]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0]]
MMC output shape: (16, 16)
MMC output: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Accumulator[0] = [[  8   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
PC = 6
operands = (0, 0, 16, 0)
ACTIVATE!
before = [[  8   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
after = [[  8   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
branch_neq: value = 10, branch pc diff = 254
PC = 4
operands = (0, 0, 0, 0)
Memory xfer! host: 0 unified buffer: 0: length: 0 (FLAGS? 0)
  read weights from DRAM into MMU
PC = 5
operands = (16, 0, 16, 1)
Matrix things....
  UB@16 + 16 -> MMU -> accumulator@0 + 16
MMC input shape: (16, 16)
MMC matrix: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
MMC weight: 
[[ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 10]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 -2]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0]]
MMC output shape: (16, 16)
MMC output: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Accumulator[0] = [[  9   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
PC = 6
operands = (0, 0, 16, 0)
ACTIVATE!
before = [[  9   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
after = [[  9   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
branch_neq: value = 10, branch pc diff = 254
PC = 4
operands = (0, 0, 0, 0)
Memory xfer! host: 0 unified buffer: 0: length: 0 (FLAGS? 0)
  read weights from DRAM into MMU
PC = 5
operands = (16, 0, 16, 1)
Matrix things....
  UB@16 + 16 -> MMU -> accumulator@0 + 16
MMC input shape: (16, 16)
MMC matrix: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
MMC weight: 
[[ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  1  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  1  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  1  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  1  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  1  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  1  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  1  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  1  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  1  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  1  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  1  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  1  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 10]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  1  0 -2]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  1  0]]
MMC output shape: (16, 16)
MMC output: 
[[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Accumulator[0] = [[ 10   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
PC = 6
operands = (0, 0, 16, 0)
ACTIVATE!
before = [[ 10   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
after = [[ 10   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13  15  16 110]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0   0]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   0   0  10]
 [  1   2   3   4   5   6   7   8   9  10  11  12  13   1   0  -2]]
branch_neq: value = 10, branch pc diff = 254
PC = 7
operands = (0, 0, 0, 0)
H A L T
[[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13  0  0  0]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13  1  0  0]
 [ 1  2  3  4  5  6  7  8  9 10 11 12 13  0  1  0]
 [ 1  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]]
ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
