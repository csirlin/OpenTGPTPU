Testing 19_whm_normal
Simulation terminated at cycle 150
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
WHM standard matrix: read unified buffer [0:32], write to host memory [32:64]. Flags? 0
slice is [[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
H A L T
MMC Count: 0
HM Count: 2
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 19_whm_normal passed
Testing 18_whm_vec
Simulation terminated at cycle 150
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [480:512]. Flags? 0
slice is [[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
WHM vec matrix: read unified buffer [480:512], write to host memory [31:63]. Buffer addr is 993 -> [31][1]. Flags? 1
slice is [[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
H A L T
MMC Count: 0
HM Count: 2
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 18_whm_vec passed
Testing 11_jump_backward
Simulation terminated at cycle 350
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[   1  500    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[   1  500    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
MMC output: 
[[   1  500    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[   1  500    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[   1  500    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   1  500    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Before activation:
[[   1  500    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
After activation:
[[   1  500    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Unconditional jump from 200 to 500. No write to UB.

PC = 500
RW 1: read weight matrix 1 into weight FIFO
[[1025  350 1027 ... 1054 1055    4]
 [1057 1058 1059 ... 1086 1087 1088]
 [1089 1090 1091 ... 1118 1119 1120]
 ...
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]
 [2017 2018 2019 ... 2046 2047 2048]]

PC = 501

PC = 502

PC = 503

PC = 504

PC = 505

PC = 506

PC = 507

PC = 508

PC = 509

PC = 510

PC = 511

PC = 512

PC = 513

PC = 514

PC = 515

PC = 516

PC = 517

PC = 518

PC = 519

PC = 520

PC = 521

PC = 522

PC = 523

PC = 524

PC = 525

PC = 526

PC = 527

PC = 528

PC = 529

PC = 530

PC = 531

PC = 532

PC = 533

PC = 534

PC = 535

PC = 536

PC = 537

PC = 538

PC = 539

PC = 540

PC = 541

PC = 542

PC = 543

PC = 544

PC = 545

PC = 546

PC = 547

PC = 548

PC = 549

PC = 550
MMC: multiply UB[0:32] with a weight, store in ACC[32:64]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[1025  350 1027 ... 1054 1055    4]
 [1057 1058 1059 ... 1086 1087 1088]
 [1089 1090 1091 ... 1118 1119 1120]
 ...
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]
 [2017 2018 2019 ... 2046 2047 2048]]
MMC output: 
[[1025  350 1027 ... 1054 1055    4]
 [1057 1058 1059 ... 1086 1087 1088]
 [1089 1090 1091 ... 1118 1119 1120]
 ...
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]
 [2017 2018 2019 ... 2046 2047 2048]]
Accumulating with ACC[32:64]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[1025  350 1027 ... 1054 1055    4]
 [1057 1058 1059 ... 1086 1087 1088]
 [1089 1090 1091 ... 1118 1119 1120]
 ...
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]
 [2017 2018 2019 ... 2046 2047 2048]]

PC = 551

PC = 552

PC = 553

PC = 554

PC = 555

PC = 556

PC = 557

PC = 558

PC = 559

PC = 560

PC = 561

PC = 562

PC = 563

PC = 564

PC = 565

PC = 566

PC = 567

PC = 568

PC = 569

PC = 570

PC = 571

PC = 572

PC = 573

PC = 574

PC = 575

PC = 576

PC = 577

PC = 578

PC = 579

PC = 580

PC = 581

PC = 582

PC = 583

PC = 584

PC = 585

PC = 586

PC = 587

PC = 588

PC = 589

PC = 590

PC = 591

PC = 592

PC = 593

PC = 594

PC = 595

PC = 596

PC = 597

PC = 598

PC = 599

PC = 600
ACT: read ACC[32:64], and write to UB[64:96]. Activation function: slice is [[1025  350 1027 ... 1054 1055    4]
 [1057 1058 1059 ... 1086 1087 1088]
 [1089 1090 1091 ... 1118 1119 1120]
 ...
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]
 [2017 2018 2019 ... 2046 2047 2048]]
slice shape is (32, 32)
given shape is (32, 32)
[[1025  350 1027 ... 1054 1055    4]
 [1057 1058 1059 ... 1086 1087 1088]
 [1089 1090 1091 ... 1118 1119 1120]
 ...
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]
 [2017 2018 2019 ... 2046 2047 2048]]
Before activation:
[[1025  350 1027 ... 1054 1055    4]
 [1057 1058 1059 ... 1086 1087 1088]
 [1089 1090 1091 ... 1118 1119 1120]
 ...
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]
 [2017 2018 2019 ... 2046 2047 2048]]
After activation:
[[1025  350 1027 ... 1054 1055    4]
 [1057 1058 1059 ... 1086 1087 1088]
 [1089 1090 1091 ... 1118 1119 1120]
 ...
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]
 [2017 2018 2019 ... 2046 2047 2048]]
Unconditional jump from 600 to 350. No write to UB.

PC = 350
H A L T
MMC Count: 2
HM Count: 1
ACT Count: 2
RW Count: 2
RW Reloads: 2
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]] uint32 (32, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [   0    0    0 ...    0    0    0]
 [   0    0    0 ...    0    0    0]
 [3073 3074 3075 ... 3102 3103 3104]] int64 (97, 32)
Test 11_jump_backward failed
Testing 3_branch_forward_second
Simulation terminated at cycle 350
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[10148   148     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[10148   148     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
MMC output: 
[[10148   148     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[10148   148     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[10148   148     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[10148   148     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
Before activation:
[[10148   148     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
After activation:
[[10148   148     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
pc before 200 <class 'int'>
Branch from 200 to 349. No write to UB.
pc after 349 <class 'int'>

PC = 349

PC = 350
H A L T
MMC Count: 1
HM Count: 1
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 349, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]] uint32 (32, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...    0    0    0]
 [ 993  994  995 ...    0    0    0]
 [2049 2050 2051 ... 2078 2079 2080]] int64 (65, 32)
Test 3_branch_forward_second failed
Testing 17_whm_cell
Simulation terminated at cycle 150
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [480:512]. Flags? 0
slice is [[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
WHM vec cell: read unified buffer [480][0], write to host memory [31][1]. Buffer addr is 993 -> [31][1]. Flags? 1
slice is [[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]]
slice shape is (1, 32)
given shape is (1, 32)
[[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]]
UB[480]: [[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]]
HM[31] before: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024]
HM[31]  after: [ 993    1  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
H A L T
MMC Count: 0
HM Count: 2
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 17_whm_cell passed
Testing 4_branch_backward_second
Simulation terminated at cycle 350
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[10298   298     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[10298   298     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
MMC output: 
[[10298   298     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[10298   298     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[10298   298     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[10298   298     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
Before activation:
[[10298   298     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
After activation:
[[10298   298     3 ...    30     0     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
pc before 200 <class 'int'>
Branch from 200 to 499. No write to UB.
pc after 499 <class 'int'>

PC = 499

PC = 500
RW 1: read weight matrix 1 into weight FIFO
[[      9748 4294967044       1027 ...       1054          0          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]

PC = 501

PC = 502

PC = 503

PC = 504

PC = 505

PC = 506

PC = 507

PC = 508

PC = 509

PC = 510

PC = 511

PC = 512

PC = 513

PC = 514

PC = 515

PC = 516

PC = 517

PC = 518

PC = 519

PC = 520

PC = 521

PC = 522

PC = 523

PC = 524

PC = 525

PC = 526

PC = 527

PC = 528

PC = 529

PC = 530

PC = 531

PC = 532

PC = 533

PC = 534

PC = 535

PC = 536

PC = 537

PC = 538

PC = 539

PC = 540

PC = 541

PC = 542

PC = 543

PC = 544

PC = 545

PC = 546

PC = 547

PC = 548

PC = 549

PC = 550
MMC: multiply UB[0:32] with a weight, store in ACC[32:64]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[      9748 4294967044       1027 ...       1054          0          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
MMC output: 
[[      9748 4294967044       1027 ...       1054          0          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
Accumulating with ACC[32:64]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[      9748 4294967044       1027 ...       1054          0          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]

PC = 551

PC = 552

PC = 553

PC = 554

PC = 555

PC = 556

PC = 557

PC = 558

PC = 559

PC = 560

PC = 561

PC = 562

PC = 563

PC = 564

PC = 565

PC = 566

PC = 567

PC = 568

PC = 569

PC = 570

PC = 571

PC = 572

PC = 573

PC = 574

PC = 575

PC = 576

PC = 577

PC = 578

PC = 579

PC = 580

PC = 581

PC = 582

PC = 583

PC = 584

PC = 585

PC = 586

PC = 587

PC = 588

PC = 589

PC = 590

PC = 591

PC = 592

PC = 593

PC = 594

PC = 595

PC = 596

PC = 597

PC = 598

PC = 599

PC = 600
ACT: read ACC[32:64], and write to UB[64:96]. Activation function: slice is [[      9748 4294967044       1027 ...       1054          0          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
slice shape is (32, 32)
given shape is (32, 32)
[[      9748 4294967044       1027 ...       1054          0          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
Before activation:
[[      9748 4294967044       1027 ...       1054          0          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
After activation:
[[      9748 4294967044       1027 ...       1054          0          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
pc before 600 <class 'int'>
Branch from 600 to 349. No write to UB.
pc after 349 <class 'int'>

PC = 349

PC = 350
H A L T
MMC Count: 2
HM Count: 1
ACT Count: 2
RW Count: 2
RW Reloads: 2
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 349, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]] uint32 (32, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [   0    0    0 ...    0    0    0]
 [   0    0    0 ...    0    0    0]
 [3073 3074 3075 ... 3102 3103 3104]] int64 (97, 32)
Test 4_branch_backward_second failed
Testing 2_branch_backward_first
Simulation terminated at cycle 350
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[  298 10298     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[  298 10298     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
MMC output: 
[[  298 10298     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[  298 10298     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[  298 10298     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[  298 10298     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
Before activation:
[[  298 10298     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
After activation:
[[  298 10298     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
pc before 200 <class 'int'>
Branch from 200 to 499. No write to UB.
pc after 499 <class 'int'>

PC = 499

PC = 500
RW 1: read weight matrix 1 into weight FIFO
[[4294967044       9748       1027 ...       1054          1          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]

PC = 501

PC = 502

PC = 503

PC = 504

PC = 505

PC = 506

PC = 507

PC = 508

PC = 509

PC = 510

PC = 511

PC = 512

PC = 513

PC = 514

PC = 515

PC = 516

PC = 517

PC = 518

PC = 519

PC = 520

PC = 521

PC = 522

PC = 523

PC = 524

PC = 525

PC = 526

PC = 527

PC = 528

PC = 529

PC = 530

PC = 531

PC = 532

PC = 533

PC = 534

PC = 535

PC = 536

PC = 537

PC = 538

PC = 539

PC = 540

PC = 541

PC = 542

PC = 543

PC = 544

PC = 545

PC = 546

PC = 547

PC = 548

PC = 549

PC = 550
MMC: multiply UB[0:32] with a weight, store in ACC[32:64]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[4294967044       9748       1027 ...       1054          1          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
MMC output: 
[[4294967044       9748       1027 ...       1054          1          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
Accumulating with ACC[32:64]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[4294967044       9748       1027 ...       1054          1          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]

PC = 551

PC = 552

PC = 553

PC = 554

PC = 555

PC = 556

PC = 557

PC = 558

PC = 559

PC = 560

PC = 561

PC = 562

PC = 563

PC = 564

PC = 565

PC = 566

PC = 567

PC = 568

PC = 569

PC = 570

PC = 571

PC = 572

PC = 573

PC = 574

PC = 575

PC = 576

PC = 577

PC = 578

PC = 579

PC = 580

PC = 581

PC = 582

PC = 583

PC = 584

PC = 585

PC = 586

PC = 587

PC = 588

PC = 589

PC = 590

PC = 591

PC = 592

PC = 593

PC = 594

PC = 595

PC = 596

PC = 597

PC = 598

PC = 599

PC = 600
ACT: read ACC[32:64], and write to UB[64:96]. Activation function: slice is [[4294967044       9748       1027 ...       1054          1          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
slice shape is (32, 32)
given shape is (32, 32)
[[4294967044       9748       1027 ...       1054          1          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
Before activation:
[[4294967044       9748       1027 ...       1054          1          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
After activation:
[[4294967044       9748       1027 ...       1054          1          1]
 [      1057       1058       1059 ...       1086       1087       1088]
 [      1089       1090       1091 ...       1118       1119       1120]
 ...
 [      1953       1954       1955 ...       1982       1983       1984]
 [      1985       1986       1987 ...       2014       2015       2016]
 [      2017       2018       2019 ...       2046       2047       2048]]
pc before 600 <class 'int'>
Branch from 600 to 349. No write to UB.
pc after 349 <class 'int'>

PC = 349

PC = 350
H A L T
MMC Count: 2
HM Count: 1
ACT Count: 2
RW Count: 2
RW Reloads: 2
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 349, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]] uint32 (32, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [   0    0    0 ...    0    0    0]
 [   0    0    0 ...    0    0    0]
 [3073 3074 3075 ... 3102 3103 3104]] int64 (97, 32)
Test 2_branch_backward_first failed
Testing 13_rhm_cell
Simulation terminated at cycle 150
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [480:512]. Flags? 0
slice is [[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RHM vec cell: read host memory [31][1] and pad with 0s, write to unified buffer [0]. Buffer addr is 993 -> [31][1]. Flags? 1
slice is [[ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024]]
slice shape is (1, 32)
given shape is (1, 32)
[[ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024]]
[[994.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
H A L T
MMC Count: 0
HM Count: 2
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 13_rhm_cell passed
Testing 1_branch_forward_first
Simulation terminated at cycle 350
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[  148 10148     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[  148 10148     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
MMC output: 
[[  148 10148     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[  148 10148     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[  148 10148     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[  148 10148     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
Before activation:
[[  148 10148     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
After activation:
[[  148 10148     3 ...    30     1     1]
 [   33    34    35 ...    62    63    64]
 [   65    66    67 ...    94    95    96]
 ...
 [  929   930   931 ...   958   959   960]
 [  961   962   963 ...   990   991   992]
 [  993   994   995 ...  1022  1023  1024]]
pc before 200 <class 'int'>
Branch from 200 to 349. No write to UB.
pc after 349 <class 'int'>

PC = 349

PC = 350
H A L T
MMC Count: 1
HM Count: 1
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 349, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]] uint32 (32, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...    0    0    0]
 [ 993  994  995 ...    0    0    0]
 [2049 2050 2051 ... 2078 2079 2080]] int64 (65, 32)
Test 1_branch_forward_first failed
Testing 7_lt_check_lt0
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[4294967281          2          3 ...         30         31          3]
 [        33         34         35 ...         62         63         64]
 [        65         66         67 ...         94         95         96]
 ...
 [       929        930        931 ...        958        959        960]
 [       961        962        963 ...        990        991        992]
 [       993        994        995 ...       1022       1023       1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[4294967281          2          3 ...         30         31          3]
 [        33         34         35 ...         62         63         64]
 [        65         66         67 ...         94         95         96]
 ...
 [       929        930        931 ...        958        959        960]
 [       961        962        963 ...        990        991        992]
 [       993        994        995 ...       1022       1023       1024]]
MMC output: 
[[4294967281          2          3 ...         30         31          3]
 [        33         34         35 ...         62         63         64]
 [        65         66         67 ...         94         95         96]
 ...
 [       929        930        931 ...        958        959        960]
 [       961        962        963 ...        990        991        992]
 [       993        994        995 ...       1022       1023       1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[4294967281          2          3 ...         30         31          3]
 [        33         34         35 ...         62         63         64]
 [        65         66         67 ...         94         95         96]
 ...
 [       929        930        931 ...        958        959        960]
 [       961        962        963 ...        990        991        992]
 [       993        994        995 ...       1022       1023       1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[4294967281          2          3 ...         30         31          3]
 [        33         34         35 ...         62         63         64]
 [        65         66         67 ...         94         95         96]
 ...
 [       929        930        931 ...        958        959        960]
 [       961        962        963 ...        990        991        992]
 [       993        994        995 ...       1022       1023       1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[4294967281          2          3 ...         30         31          3]
 [        33         34         35 ...         62         63         64]
 [        65         66         67 ...         94         95         96]
 ...
 [       929        930        931 ...        958        959        960]
 [       961        962        963 ...        990        991        992]
 [       993        994        995 ...       1022       1023       1024]]
Before activation:
[[4294967281          2          3 ...         30         31          3]
 [        33         34         35 ...         62         63         64]
 [        65         66         67 ...         94         95         96]
 ...
 [       929        930        931 ...        958        959        960]
 [       961        962        963 ...        990        991        992]
 [       993        994        995 ...       1022       1023       1024]]
After activation:
[[4294967281          2          3 ...         30         31          3]
 [        33         34         35 ...         62         63         64]
 [        65         66         67 ...         94         95         96]
 ...
 [       929        930        931 ...        958        959        960]
 [       961        962        963 ...        990        991        992]
 [       993        994        995 ...       1022       1023       1024]]
Less than check, evaluates to False (4294967281 !< 0).
After branch/comparison/jump:
[[   0    2    3 ...   30   31    0]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [64:65], write to unified buffer [64:65]. Flags? 0
slice is [[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
slice shape is (1, 32)
given shape is (1, 32)
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]
 [2049 2050 2051 ... 2078 2079 2080]] uint32 (65, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...    0    0    0]
 [ 993  994  995 ...    0    0    0]
 [2049 2050 2051 ... 2078 2079 2080]] int64 (65, 32)
row 32: Control: [ 0  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  0], Test: [4294967281          2          3          4          5          6          7          8          9         10         11         12         13         14         15         16         17          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0]
row 33: Control: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64], Test: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 34: Control: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96], Test: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 35: Control: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128], Test: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 36: Control: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160], Test: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 37: Control: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192], Test: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 38: Control: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224], Test: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 39: Control: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256], Test: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 40: Control: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288], Test: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 41: Control: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320], Test: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 42: Control: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352], Test: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 43: Control: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384], Test: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 44: Control: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416], Test: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 45: Control: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448], Test: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 46: Control: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480], Test: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 47: Control: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512], Test: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 48: Control: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544], Test: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 49: Control: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576], Test: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 50: Control: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608], Test: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 51: Control: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640], Test: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 52: Control: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672], Test: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 53: Control: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704], Test: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 54: Control: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736], Test: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 55: Control: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768], Test: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 56: Control: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800], Test: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 57: Control: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832], Test: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 58: Control: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864], Test: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 59: Control: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896], Test: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 60: Control: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928], Test: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 61: Control: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960], Test: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 62: Control: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992], Test: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 63: Control: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024], Test: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0]
Test 7_lt_check_lt0 failed
Testing 16_rhm_normal
Simulation terminated at cycle 100
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
H A L T
MMC Count: 0
HM Count: 1
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 16_rhm_normal passed
Testing 12_act_normal
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[   1    2    3 ...   30   31   42]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[   1    2    3 ...   30   31   42]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
MMC output: 
[[   1    2    3 ...   30   31   42]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[   1    2    3 ...   30   31   42]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[   1    2    3 ...   30   31   42]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   1    2    3 ...   30   31   42]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Before activation:
[[   1    2    3 ...   30   31   42]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
After activation:
[[   1    2    3 ...   30   31   42]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Normal activation.
After branch/comparison/jump:
[[   1    2    3 ...   30   31   42]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [64:65], write to unified buffer [64:65]. Flags? 0
slice is [[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
slice shape is (1, 32)
given shape is (1, 32)
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]
 [2049 2050 2051 ... 2078 2079 2080]] uint32 (65, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...    0    0    0]
 [ 993  994  995 ...    0    0    0]
 [2049 2050 2051 ... 2078 2079 2080]] int64 (65, 32)
row 32: Control: [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 42], Test: [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 33: Control: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64], Test: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 34: Control: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96], Test: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 35: Control: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128], Test: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 36: Control: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160], Test: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 37: Control: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192], Test: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 38: Control: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224], Test: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 39: Control: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256], Test: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 40: Control: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288], Test: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 41: Control: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320], Test: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 42: Control: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352], Test: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 43: Control: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384], Test: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 44: Control: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416], Test: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 45: Control: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448], Test: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 46: Control: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480], Test: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 47: Control: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512], Test: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 48: Control: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544], Test: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 49: Control: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576], Test: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 50: Control: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608], Test: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 51: Control: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640], Test: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 52: Control: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672], Test: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 53: Control: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704], Test: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 54: Control: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736], Test: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 55: Control: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768], Test: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 56: Control: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800], Test: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 57: Control: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832], Test: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 58: Control: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864], Test: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 59: Control: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896], Test: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 60: Control: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928], Test: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 61: Control: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960], Test: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 62: Control: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992], Test: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 63: Control: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024], Test: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0]
Test 12_act_normal failed
Testing 14_rhm_vec
Simulation terminated at cycle 150
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [480:512]. Flags? 0
slice is [[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
[[   1    2    3 ...   30   31   32]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RHM vec matrix: read host memory [31:63], write to unified buffer [0:32]. Buffer addr is 993 -> [31][1]. Flags? 1
[[ 993  994  995 ... 1022 1023 1024]
 [1025 1026 1027 ... 1054 1055 1056]
 [1057 1058 1059 ... 1086 1087 1088]
 ...
 [1921 1922 1923 ... 1950 1951 1952]
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]]
slice is [[ 993  994  995 ... 1022 1023 1024]
 [1025 1026 1027 ... 1054 1055 1056]
 [1057 1058 1059 ... 1086 1087 1088]
 ...
 [1921 1922 1923 ... 1950 1951 1952]
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]]
slice shape is (32, 32)
given shape is (32, 32)
[[ 993  994  995 ... 1022 1023 1024]
 [1025 1026 1027 ... 1054 1055 1056]
 [1057 1058 1059 ... 1086 1087 1088]
 ...
 [1921 1922 1923 ... 1950 1951 1952]
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]]
[[ 993  994  995 ... 1022 1023 1024]
 [1025 1026 1027 ... 1054 1055 1056]
 [1057 1058 1059 ... 1086 1087 1088]
 ...
 [1921 1922 1923 ... 1950 1951 1952]
 [1953 1954 1955 ... 1982 1983 1984]
 [1985 1986 1987 ... 2014 2015 2016]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
H A L T
MMC Count: 0
HM Count: 2
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 14_rhm_vec passed
Testing 5_eq_check_eq
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[   0    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[   0    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
MMC output: 
[[   0    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[   0    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[   0    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   0    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Before activation:
[[   0    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
After activation:
[[   0    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Equality check, evaluates to True.
After branch/comparison/jump:
[[   1    0    3 ...   30   31    0]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [64:65], write to unified buffer [64:65]. Flags? 0
slice is [[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
slice shape is (1, 32)
given shape is (1, 32)
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]
 [2049 2050 2051 ... 2078 2079 2080]] uint32 (65, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...    0    0    0]
 [ 993  994  995 ...    0    0    0]
 [2049 2050 2051 ... 2078 2079 2080]] int64 (65, 32)
row 32: Control: [ 1  0  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  0], Test: [ 0  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 33: Control: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64], Test: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 34: Control: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96], Test: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 35: Control: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128], Test: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 36: Control: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160], Test: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 37: Control: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192], Test: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 38: Control: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224], Test: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 39: Control: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256], Test: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 40: Control: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288], Test: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 41: Control: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320], Test: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 42: Control: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352], Test: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 43: Control: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384], Test: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 44: Control: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416], Test: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 45: Control: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448], Test: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 46: Control: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480], Test: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 47: Control: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512], Test: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 48: Control: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544], Test: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 49: Control: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576], Test: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 50: Control: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608], Test: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 51: Control: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640], Test: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 52: Control: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672], Test: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 53: Control: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704], Test: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 54: Control: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736], Test: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 55: Control: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768], Test: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 56: Control: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800], Test: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 57: Control: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832], Test: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 58: Control: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864], Test: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 59: Control: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896], Test: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 60: Control: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928], Test: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 61: Control: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960], Test: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 62: Control: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992], Test: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 63: Control: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024], Test: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0]
Test 5_eq_check_eq failed
Testing 8_lt_check_eq0
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[   0    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[   0    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
MMC output: 
[[   0    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[   0    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[   0    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   0    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Before activation:
[[   0    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
After activation:
[[   0    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Less than check, evaluates to False (0 !< 0).
After branch/comparison/jump:
[[   0    2    3 ...   30   31    0]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [64:65], write to unified buffer [64:65]. Flags? 0
slice is [[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
slice shape is (1, 32)
given shape is (1, 32)
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]
 [2049 2050 2051 ... 2078 2079 2080]] uint32 (65, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...    0    0    0]
 [ 993  994  995 ...    0    0    0]
 [2049 2050 2051 ... 2078 2079 2080]] int64 (65, 32)
row 32: Control: [ 0  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  0], Test: [ 0  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 33: Control: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64], Test: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 34: Control: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96], Test: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 35: Control: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128], Test: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 36: Control: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160], Test: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 37: Control: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192], Test: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 38: Control: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224], Test: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 39: Control: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256], Test: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 40: Control: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288], Test: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 41: Control: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320], Test: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 42: Control: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352], Test: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 43: Control: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384], Test: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 44: Control: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416], Test: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 45: Control: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448], Test: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 46: Control: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480], Test: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 47: Control: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512], Test: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 48: Control: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544], Test: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 49: Control: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576], Test: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 50: Control: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608], Test: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 51: Control: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640], Test: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 52: Control: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672], Test: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 53: Control: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704], Test: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 54: Control: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736], Test: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 55: Control: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768], Test: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 56: Control: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800], Test: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 57: Control: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832], Test: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 58: Control: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864], Test: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 59: Control: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896], Test: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 60: Control: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928], Test: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 61: Control: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960], Test: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 62: Control: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992], Test: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 63: Control: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024], Test: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0]
Test 8_lt_check_eq0 failed
Testing 9_lt_check_gt0
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[  15    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[  15    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
MMC output: 
[[  15    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[  15    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[  15    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[  15    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Before activation:
[[  15    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
After activation:
[[  15    2    3 ...   30   31    3]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Less than check, evaluates to False (15 !< 0).
After branch/comparison/jump:
[[   0    2    3 ...   30   31    0]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [64:65], write to unified buffer [64:65]. Flags? 0
slice is [[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
slice shape is (1, 32)
given shape is (1, 32)
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]
 [2049 2050 2051 ... 2078 2079 2080]] uint32 (65, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...    0    0    0]
 [ 993  994  995 ...    0    0    0]
 [2049 2050 2051 ... 2078 2079 2080]] int64 (65, 32)
row 32: Control: [ 0  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  0], Test: [15  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 33: Control: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64], Test: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 34: Control: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96], Test: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 35: Control: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128], Test: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 36: Control: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160], Test: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 37: Control: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192], Test: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 38: Control: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224], Test: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 39: Control: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256], Test: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 40: Control: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288], Test: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 41: Control: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320], Test: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 42: Control: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352], Test: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 43: Control: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384], Test: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 44: Control: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416], Test: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 45: Control: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448], Test: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 46: Control: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480], Test: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 47: Control: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512], Test: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 48: Control: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544], Test: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 49: Control: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576], Test: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 50: Control: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608], Test: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 51: Control: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640], Test: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 52: Control: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672], Test: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 53: Control: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704], Test: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 54: Control: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736], Test: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 55: Control: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768], Test: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 56: Control: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800], Test: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 57: Control: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832], Test: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 58: Control: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864], Test: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 59: Control: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896], Test: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 60: Control: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928], Test: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 61: Control: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960], Test: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 62: Control: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992], Test: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 63: Control: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024], Test: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0]
Test 9_lt_check_gt0 failed
Testing 6_eq_check_neq
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[  42    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[  42    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
MMC output: 
[[  42    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[  42    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[  42    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[  42    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Before activation:
[[  42    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
After activation:
[[  42    2    3 ...   30   31    2]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Equality check, evaluates to False.
After branch/comparison/jump:
[[   0    0    3 ...   30   31    0]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [64:65], write to unified buffer [64:65]. Flags? 0
slice is [[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
slice shape is (1, 32)
given shape is (1, 32)
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]
[[2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]
 [2049 2050 2051 ... 2078 2079 2080]] uint32 (65, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...    0    0    0]
 [ 993  994  995 ...    0    0    0]
 [2049 2050 2051 ... 2078 2079 2080]] int64 (65, 32)
row 32: Control: [ 0  0  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  0], Test: [42  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 33: Control: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64], Test: [33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 34: Control: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96], Test: [65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0]
row 35: Control: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128], Test: [ 97  98  99 100 101 102 103 104 105 106 107 108 109 110 111 112 113   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 36: Control: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160], Test: [129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 37: Control: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192], Test: [161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 38: Control: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224], Test: [193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 39: Control: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256], Test: [225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 40: Control: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288], Test: [257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 41: Control: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320], Test: [289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 42: Control: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352], Test: [321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 43: Control: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384], Test: [353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 44: Control: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416], Test: [385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 45: Control: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448], Test: [417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 46: Control: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480], Test: [449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 47: Control: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512], Test: [481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 48: Control: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544], Test: [513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 49: Control: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576], Test: [545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 50: Control: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608], Test: [577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 51: Control: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640], Test: [609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 52: Control: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672], Test: [641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 53: Control: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704], Test: [673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 54: Control: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736], Test: [705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 55: Control: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768], Test: [737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 56: Control: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800], Test: [769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 57: Control: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832], Test: [801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 58: Control: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864], Test: [833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 59: Control: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896], Test: [865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 60: Control: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928], Test: [897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 61: Control: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960], Test: [929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 62: Control: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992], Test: [961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0]
row 63: Control: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024], Test: [ 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009    0    0    0    0    0    0    0    0    0    0    0    0    0    0    0]
Test 6_eq_check_neq failed
Testing 15_rhm_pc_ret
Simulation terminated at cycle 100
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM pc return: create curent pc vector, write to unified buffer [32]. Flags? 2
[[ 0. 52.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  0.  4.]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
H A L T
MMC Count: 0
HM Count: 1
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[ 0  0  0 ...  0  0  0]
 [ 0  0  0 ...  0  0  0]
 [ 0  0  0 ...  0  0  0]
 ...
 [ 0  0  0 ...  0  0  0]
 [ 0  0  0 ...  0  0  0]
 [ 0 52  0 ...  0  0  4]] uint32 (33, 32)
Test:
[[ 0  0  0 ...  0  0  0]
 [ 0  0  0 ...  0  0  0]
 [ 0  0  0 ...  0  0  0]
 ...
 [ 0  0  0 ...  0  0  0]
 [ 0  0  0 ...  0  0  0]
 [ 0 53  0 ...  0  0  4]] int64 (33, 32)
row 32: Control: [ 0 52  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  4], Test: [ 0 53  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  4]
Test 15_rhm_pc_ret failed
Testing 10_jump_forward
Simulation terminated at cycle 350
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:32], write to unified buffer [0:32]. Flags? 0
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[   1  350    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:32] with a weight, store in ACC[0:32]
slice is [[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
slice shape is (32, 32)
given shape is (32, 32)
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC matrix: 
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]]
MMC weight: 
[[   1  350    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
MMC output: 
[[   1  350    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Accumulating with ACC[0:32]
[[0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 ...
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]
 [0 0 0 ... 0 0 0]]
After MMC + ACC: 
[[   1  350    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:32], and write to UB[32:64]. Activation function: slice is [[   1  350    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
slice shape is (32, 32)
given shape is (32, 32)
[[   1  350    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Before activation:
[[   1  350    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
After activation:
[[   1  350    3 ...   30   31    4]
 [  33   34   35 ...   62   63   64]
 [  65   66   67 ...   94   95   96]
 ...
 [ 929  930  931 ...  958  959  960]
 [ 961  962  963 ...  990  991  992]
 [ 993  994  995 ... 1022 1023 1024]]
Unconditional jump from 200 to 350. No write to UB.

PC = 350
H A L T
MMC Count: 1
HM Count: 1
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[1 0 0 ... 0 0 0]
 [0 1 0 ... 0 0 0]
 [0 0 1 ... 0 0 0]
 ...
 [0 0 0 ... 1 0 0]
 [0 0 0 ... 0 1 0]
 [0 0 0 ... 0 0 1]] uint32 (32, 32)
Test:
[[   1    0    0 ...    0    0    0]
 [   0    1    0 ...    0    0    0]
 [   0    0    1 ...    0    0    0]
 ...
 [ 961  962  963 ...    0    0    0]
 [ 993  994  995 ...    0    0    0]
 [2049 2050 2051 ... 2078 2079 2080]] int64 (65, 32)
Test 10_jump_forward failed
