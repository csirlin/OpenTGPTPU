Testing 19_whm_normal
Simulation terminated at cycle 150
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
WHM standard matrix: read unified buffer [0:8], write to host memory [8:16]. Flags? 0
slice is [[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
H A L T
MMC Count: 0
HM Count: 2
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 19_whm_normal passed
Testing 18_whm_vec
Simulation terminated at cycle 150
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [120:128]. Flags? 0
slice is [[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
WHM vec matrix: read unified buffer [120:128], write to host memory [7:15]. Buffer addr is 57 -> [7][1]. Flags? 1
slice is [[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
H A L T
MMC Count: 0
HM Count: 2
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 18_whm_vec passed
Testing 11_jump_backward
Simulation terminated at cycle 304
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[  1 500   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[  1 500   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
MMC output: 
[[  1 500   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[  1 500   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[  1 500   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
slice shape is (8, 8)
given shape is (8, 8)
[[  1 500   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
Before activation:
[[  1 500   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
After activation:
[[  1 500   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
Unconditional jump from 200 to 500. No write to UB.

PC = 500
RW 1: read weight matrix 1 into weight FIFO
[[ 65 350  67  68  69  70  71   4]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]
 [121 122 123 124 125 126 127 128]]

PC = 501

PC = 502

PC = 503

PC = 504

PC = 505

PC = 506

PC = 507

PC = 508

PC = 509

PC = 510

PC = 511

PC = 512

PC = 513

PC = 514

PC = 515

PC = 516

PC = 517

PC = 518

PC = 519

PC = 520

PC = 521

PC = 522

PC = 523

PC = 524

PC = 525

PC = 526

PC = 527

PC = 528

PC = 529

PC = 530

PC = 531

PC = 532

PC = 533

PC = 534

PC = 535

PC = 536

PC = 537

PC = 538

PC = 539

PC = 540

PC = 541

PC = 542

PC = 543

PC = 544

PC = 545

PC = 546

PC = 547

PC = 548

PC = 549

PC = 550
MMC: multiply UB[0:8] with a weight, store in ACC[8:16]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[ 65 350  67  68  69  70  71   4]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]
 [121 122 123 124 125 126 127 128]]
MMC output: 
[[ 65 350  67  68  69  70  71   4]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]
 [121 122 123 124 125 126 127 128]]
Accumulating with ACC[8:16]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[ 65 350  67  68  69  70  71   4]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]
 [121 122 123 124 125 126 127 128]]

PC = 551

PC = 552

PC = 553

PC = 554

PC = 555

PC = 556

PC = 557

PC = 558

PC = 559

PC = 560

PC = 561

PC = 562

PC = 563

PC = 564

PC = 565

PC = 566

PC = 567

PC = 568

PC = 569

PC = 570

PC = 571

PC = 572

PC = 573

PC = 574

PC = 575

PC = 576

PC = 577

PC = 578

PC = 579

PC = 580

PC = 581

PC = 582

PC = 583

PC = 584

PC = 585

PC = 586

PC = 587

PC = 588

PC = 589

PC = 590

PC = 591

PC = 592

PC = 593

PC = 594

PC = 595

PC = 596

PC = 597

PC = 598

PC = 599

PC = 600
ACT: read ACC[8:16], and write to UB[16:24]. Activation function: slice is [[ 65 350  67  68  69  70  71   4]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]
 [121 122 123 124 125 126 127 128]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 65 350  67  68  69  70  71   4]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]
 [121 122 123 124 125 126 127 128]]
Before activation:
[[ 65 350  67  68  69  70  71   4]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]
 [121 122 123 124 125 126 127 128]]
After activation:
[[ 65 350  67  68  69  70  71   4]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]
 [121 122 123 124 125 126 127 128]]
Unconditional jump from 600 to 350. No write to UB.

PC = 350
H A L T
MMC Count: 2
HM Count: 1
ACT Count: 2
RW Count: 2
RW Reloads: 2
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 11_jump_backward passed
Testing 3_branch_forward_second
Simulation terminated at cycle 202
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[10148   148     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[10148   148     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
MMC output: 
[[10148   148     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[10148   148     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[10148   148     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
slice shape is (8, 8)
given shape is (8, 8)
[[10148   148     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
Before activation:
[[10148   148     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
After activation:
[[10148   148     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
pc before 200 <class 'int'>
Branch from 200 to 349. No write to UB.
pc after 349 <class 'int'>

PC = 349

PC = 350
H A L T
MMC Count: 1
HM Count: 1
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 349, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 3_branch_forward_second passed
Testing 17_whm_cell
Simulation terminated at cycle 150
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [120:128]. Flags? 0
slice is [[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
WHM vec cell: read unified buffer [120][0], write to host memory [7][1]. Buffer addr is 57 -> [7][1]. Flags? 1
slice is [[1 2 3 4 5 6 7 8]]
slice shape is (1, 8)
given shape is (1, 8)
[[1 2 3 4 5 6 7 8]]
UB[120]: [[1 2 3 4 5 6 7 8]]
HM[7] before: [57 58 59 60 61 62 63 64]
HM[7]  after: [57  1 59 60 61 62 63 64]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
H A L T
MMC Count: 0
HM Count: 2
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 17_whm_cell passed
Testing 4_branch_backward_second
Simulation terminated at cycle 304
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[10298   298     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[10298   298     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
MMC output: 
[[10298   298     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[10298   298     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[10298   298     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
slice shape is (8, 8)
given shape is (8, 8)
[[10298   298     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
Before activation:
[[10298   298     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
After activation:
[[10298   298     3     4     5     6     0     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
pc before 200 <class 'int'>
Branch from 200 to 499. No write to UB.
pc after 499 <class 'int'>

PC = 499

PC = 500
RW 1: read weight matrix 1 into weight FIFO
[[      9748 4294967044         67         68         69         70          0          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]

PC = 501

PC = 502

PC = 503

PC = 504

PC = 505

PC = 506

PC = 507

PC = 508

PC = 509

PC = 510

PC = 511

PC = 512

PC = 513

PC = 514

PC = 515

PC = 516

PC = 517

PC = 518

PC = 519

PC = 520

PC = 521

PC = 522

PC = 523

PC = 524

PC = 525

PC = 526

PC = 527

PC = 528

PC = 529

PC = 530

PC = 531

PC = 532

PC = 533

PC = 534

PC = 535

PC = 536

PC = 537

PC = 538

PC = 539

PC = 540

PC = 541

PC = 542

PC = 543

PC = 544

PC = 545

PC = 546

PC = 547

PC = 548

PC = 549

PC = 550
MMC: multiply UB[0:8] with a weight, store in ACC[8:16]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[      9748 4294967044         67         68         69         70          0          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
MMC output: 
[[      9748 4294967044         67         68         69         70          0          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
Accumulating with ACC[8:16]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[      9748 4294967044         67         68         69         70          0          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]

PC = 551

PC = 552

PC = 553

PC = 554

PC = 555

PC = 556

PC = 557

PC = 558

PC = 559

PC = 560

PC = 561

PC = 562

PC = 563

PC = 564

PC = 565

PC = 566

PC = 567

PC = 568

PC = 569

PC = 570

PC = 571

PC = 572

PC = 573

PC = 574

PC = 575

PC = 576

PC = 577

PC = 578

PC = 579

PC = 580

PC = 581

PC = 582

PC = 583

PC = 584

PC = 585

PC = 586

PC = 587

PC = 588

PC = 589

PC = 590

PC = 591

PC = 592

PC = 593

PC = 594

PC = 595

PC = 596

PC = 597

PC = 598

PC = 599

PC = 600
ACT: read ACC[8:16], and write to UB[16:24]. Activation function: slice is [[      9748 4294967044         67         68         69         70          0          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
slice shape is (8, 8)
given shape is (8, 8)
[[      9748 4294967044         67         68         69         70          0          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
Before activation:
[[      9748 4294967044         67         68         69         70          0          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
After activation:
[[      9748 4294967044         67         68         69         70          0          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
pc before 600 <class 'int'>
Branch from 600 to 349. No write to UB.
pc after 349 <class 'int'>

PC = 349

PC = 350
H A L T
MMC Count: 2
HM Count: 1
ACT Count: 2
RW Count: 2
RW Reloads: 2
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 349, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 4_branch_backward_second passed
Testing 2_branch_backward_first
Simulation terminated at cycle 304
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[  298 10298     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[  298 10298     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
MMC output: 
[[  298 10298     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[  298 10298     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[  298 10298     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
slice shape is (8, 8)
given shape is (8, 8)
[[  298 10298     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
Before activation:
[[  298 10298     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
After activation:
[[  298 10298     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
pc before 200 <class 'int'>
Branch from 200 to 499. No write to UB.
pc after 499 <class 'int'>

PC = 499

PC = 500
RW 1: read weight matrix 1 into weight FIFO
[[4294967044       9748         67         68         69         70          1          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]

PC = 501

PC = 502

PC = 503

PC = 504

PC = 505

PC = 506

PC = 507

PC = 508

PC = 509

PC = 510

PC = 511

PC = 512

PC = 513

PC = 514

PC = 515

PC = 516

PC = 517

PC = 518

PC = 519

PC = 520

PC = 521

PC = 522

PC = 523

PC = 524

PC = 525

PC = 526

PC = 527

PC = 528

PC = 529

PC = 530

PC = 531

PC = 532

PC = 533

PC = 534

PC = 535

PC = 536

PC = 537

PC = 538

PC = 539

PC = 540

PC = 541

PC = 542

PC = 543

PC = 544

PC = 545

PC = 546

PC = 547

PC = 548

PC = 549

PC = 550
MMC: multiply UB[0:8] with a weight, store in ACC[8:16]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[4294967044       9748         67         68         69         70          1          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
MMC output: 
[[4294967044       9748         67         68         69         70          1          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
Accumulating with ACC[8:16]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[4294967044       9748         67         68         69         70          1          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]

PC = 551

PC = 552

PC = 553

PC = 554

PC = 555

PC = 556

PC = 557

PC = 558

PC = 559

PC = 560

PC = 561

PC = 562

PC = 563

PC = 564

PC = 565

PC = 566

PC = 567

PC = 568

PC = 569

PC = 570

PC = 571

PC = 572

PC = 573

PC = 574

PC = 575

PC = 576

PC = 577

PC = 578

PC = 579

PC = 580

PC = 581

PC = 582

PC = 583

PC = 584

PC = 585

PC = 586

PC = 587

PC = 588

PC = 589

PC = 590

PC = 591

PC = 592

PC = 593

PC = 594

PC = 595

PC = 596

PC = 597

PC = 598

PC = 599

PC = 600
ACT: read ACC[8:16], and write to UB[16:24]. Activation function: slice is [[4294967044       9748         67         68         69         70          1          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
slice shape is (8, 8)
given shape is (8, 8)
[[4294967044       9748         67         68         69         70          1          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
Before activation:
[[4294967044       9748         67         68         69         70          1          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
After activation:
[[4294967044       9748         67         68         69         70          1          1]
 [        73         74         75         76         77         78         79         80]
 [        81         82         83         84         85         86         87         88]
 [        89         90         91         92         93         94         95         96]
 [        97         98         99        100        101        102        103        104]
 [       105        106        107        108        109        110        111        112]
 [       113        114        115        116        117        118        119        120]
 [       121        122        123        124        125        126        127        128]]
pc before 600 <class 'int'>
Branch from 600 to 349. No write to UB.
pc after 349 <class 'int'>

PC = 349

PC = 350
H A L T
MMC Count: 2
HM Count: 1
ACT Count: 2
RW Count: 2
RW Reloads: 2
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 349, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 2_branch_backward_first passed
Testing 13_rhm_cell
Simulation terminated at cycle 150
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [120:128]. Flags? 0
slice is [[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RHM vec cell: read host memory [7][1] and pad with 0s, write to unified buffer [0]. Buffer addr is 57 -> [7][1]. Flags? 1
slice is [[57 58 59 60 61 62 63 64]]
slice shape is (1, 8)
given shape is (1, 8)
[[57 58 59 60 61 62 63 64]]
[[58.  0.  0.  0.  0.  0.  0.  0.]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
H A L T
MMC Count: 0
HM Count: 2
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 13_rhm_cell passed
Testing 1_branch_forward_first
Simulation terminated at cycle 202
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[  148 10148     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[  148 10148     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
MMC output: 
[[  148 10148     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[  148 10148     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[  148 10148     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
slice shape is (8, 8)
given shape is (8, 8)
[[  148 10148     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
Before activation:
[[  148 10148     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
After activation:
[[  148 10148     3     4     5     6     1     1]
 [    9    10    11    12    13    14    15    16]
 [   17    18    19    20    21    22    23    24]
 [   25    26    27    28    29    30    31    32]
 [   33    34    35    36    37    38    39    40]
 [   41    42    43    44    45    46    47    48]
 [   49    50    51    52    53    54    55    56]
 [   57    58    59    60    61    62    63    64]]
pc before 200 <class 'int'>
Branch from 200 to 349. No write to UB.
pc after 349 <class 'int'>

PC = 349

PC = 350
H A L T
MMC Count: 1
HM Count: 1
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 349, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 1_branch_forward_first passed
Testing 7_lt_check_lt0
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[4294967281          2          3          4          5          6          7          3]
 [         9         10         11         12         13         14         15         16]
 [        17         18         19         20         21         22         23         24]
 [        25         26         27         28         29         30         31         32]
 [        33         34         35         36         37         38         39         40]
 [        41         42         43         44         45         46         47         48]
 [        49         50         51         52         53         54         55         56]
 [        57         58         59         60         61         62         63         64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[4294967281          2          3          4          5          6          7          3]
 [         9         10         11         12         13         14         15         16]
 [        17         18         19         20         21         22         23         24]
 [        25         26         27         28         29         30         31         32]
 [        33         34         35         36         37         38         39         40]
 [        41         42         43         44         45         46         47         48]
 [        49         50         51         52         53         54         55         56]
 [        57         58         59         60         61         62         63         64]]
MMC output: 
[[4294967281          2          3          4          5          6          7          3]
 [         9         10         11         12         13         14         15         16]
 [        17         18         19         20         21         22         23         24]
 [        25         26         27         28         29         30         31         32]
 [        33         34         35         36         37         38         39         40]
 [        41         42         43         44         45         46         47         48]
 [        49         50         51         52         53         54         55         56]
 [        57         58         59         60         61         62         63         64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[4294967281          2          3          4          5          6          7          3]
 [         9         10         11         12         13         14         15         16]
 [        17         18         19         20         21         22         23         24]
 [        25         26         27         28         29         30         31         32]
 [        33         34         35         36         37         38         39         40]
 [        41         42         43         44         45         46         47         48]
 [        49         50         51         52         53         54         55         56]
 [        57         58         59         60         61         62         63         64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[4294967281          2          3          4          5          6          7          3]
 [         9         10         11         12         13         14         15         16]
 [        17         18         19         20         21         22         23         24]
 [        25         26         27         28         29         30         31         32]
 [        33         34         35         36         37         38         39         40]
 [        41         42         43         44         45         46         47         48]
 [        49         50         51         52         53         54         55         56]
 [        57         58         59         60         61         62         63         64]]
slice shape is (8, 8)
given shape is (8, 8)
[[4294967281          2          3          4          5          6          7          3]
 [         9         10         11         12         13         14         15         16]
 [        17         18         19         20         21         22         23         24]
 [        25         26         27         28         29         30         31         32]
 [        33         34         35         36         37         38         39         40]
 [        41         42         43         44         45         46         47         48]
 [        49         50         51         52         53         54         55         56]
 [        57         58         59         60         61         62         63         64]]
Before activation:
[[4294967281          2          3          4          5          6          7          3]
 [         9         10         11         12         13         14         15         16]
 [        17         18         19         20         21         22         23         24]
 [        25         26         27         28         29         30         31         32]
 [        33         34         35         36         37         38         39         40]
 [        41         42         43         44         45         46         47         48]
 [        49         50         51         52         53         54         55         56]
 [        57         58         59         60         61         62         63         64]]
After activation:
[[4294967281          2          3          4          5          6          7          3]
 [         9         10         11         12         13         14         15         16]
 [        17         18         19         20         21         22         23         24]
 [        25         26         27         28         29         30         31         32]
 [        33         34         35         36         37         38         39         40]
 [        41         42         43         44         45         46         47         48]
 [        49         50         51         52         53         54         55         56]
 [        57         58         59         60         61         62         63         64]]
Less than check, evaluates to False (4294967281 !< 0).
After branch/comparison/jump:
[[ 0  2  3  4  5  6  7  0]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [16:17], write to unified buffer [16:17]. Flags? 0
slice is [[129 130 131 132 133 134 135 136]]
slice shape is (1, 8)
given shape is (1, 8)
[[129 130 131 132 133 134 135 136]]
[[129 130 131 132 133 134 135 136]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 7_lt_check_lt0 passed
Testing 16_rhm_normal
Simulation terminated at cycle 100
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
H A L T
MMC Count: 0
HM Count: 1
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 16_rhm_normal passed
Testing 12_act_normal
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[ 1  2  3  4  5  6  7 42]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[ 1  2  3  4  5  6  7 42]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
MMC output: 
[[ 1  2  3  4  5  6  7 42]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[ 1  2  3  4  5  6  7 42]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[ 1  2  3  4  5  6  7 42]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 1  2  3  4  5  6  7 42]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Before activation:
[[ 1  2  3  4  5  6  7 42]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
After activation:
[[ 1  2  3  4  5  6  7 42]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Normal activation.
After branch/comparison/jump:
[[ 1  2  3  4  5  6  7 42]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [16:17], write to unified buffer [16:17]. Flags? 0
slice is [[129 130 131 132 133 134 135 136]]
slice shape is (1, 8)
given shape is (1, 8)
[[129 130 131 132 133 134 135 136]]
[[129 130 131 132 133 134 135 136]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 12_act_normal passed
Testing 14_rhm_vec
Simulation terminated at cycle 150
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [120:128]. Flags? 0
slice is [[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
[[ 1  2  3  4  5  6  7  8]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RHM vec matrix: read host memory [7:15], write to unified buffer [0:8]. Buffer addr is 57 -> [7][1]. Flags? 1
[[ 57  58  59  60  61  62  63  64]
 [ 65  66  67  68  69  70  71  72]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]]
slice is [[ 57  58  59  60  61  62  63  64]
 [ 65  66  67  68  69  70  71  72]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 57  58  59  60  61  62  63  64]
 [ 65  66  67  68  69  70  71  72]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]]
[[ 57  58  59  60  61  62  63  64]
 [ 65  66  67  68  69  70  71  72]
 [ 73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88]
 [ 89  90  91  92  93  94  95  96]
 [ 97  98  99 100 101 102 103 104]
 [105 106 107 108 109 110 111 112]
 [113 114 115 116 117 118 119 120]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
H A L T
MMC Count: 0
HM Count: 2
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 14_rhm_vec passed
Testing 5_eq_check_eq
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[ 0  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[ 0  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
MMC output: 
[[ 0  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[ 0  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[ 0  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 0  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Before activation:
[[ 0  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
After activation:
[[ 0  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Equality check, evaluates to True.
After branch/comparison/jump:
[[ 1  0  3  4  5  6  7  0]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [16:17], write to unified buffer [16:17]. Flags? 0
slice is [[129 130 131 132 133 134 135 136]]
slice shape is (1, 8)
given shape is (1, 8)
[[129 130 131 132 133 134 135 136]]
[[129 130 131 132 133 134 135 136]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 5_eq_check_eq passed
Testing 8_lt_check_eq0
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[ 0  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[ 0  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
MMC output: 
[[ 0  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[ 0  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[ 0  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[ 0  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Before activation:
[[ 0  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
After activation:
[[ 0  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Less than check, evaluates to False (0 !< 0).
After branch/comparison/jump:
[[ 0  2  3  4  5  6  7  0]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [16:17], write to unified buffer [16:17]. Flags? 0
slice is [[129 130 131 132 133 134 135 136]]
slice shape is (1, 8)
given shape is (1, 8)
[[129 130 131 132 133 134 135 136]]
[[129 130 131 132 133 134 135 136]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 8_lt_check_eq0 passed
Testing 9_lt_check_gt0
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[15  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[15  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
MMC output: 
[[15  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[15  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[15  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[15  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Before activation:
[[15  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
After activation:
[[15  2  3  4  5  6  7  3]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Less than check, evaluates to False (15 !< 0).
After branch/comparison/jump:
[[ 0  2  3  4  5  6  7  0]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [16:17], write to unified buffer [16:17]. Flags? 0
slice is [[129 130 131 132 133 134 135 136]]
slice shape is (1, 8)
given shape is (1, 8)
[[129 130 131 132 133 134 135 136]]
[[129 130 131 132 133 134 135 136]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 9_lt_check_gt0 passed
Testing 6_eq_check_neq
Simulation terminated at cycle 300
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[42  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[42  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
MMC output: 
[[42  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[42  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[42  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
slice shape is (8, 8)
given shape is (8, 8)
[[42  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Before activation:
[[42  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
After activation:
[[42  2  3  4  5  6  7  2]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]
Equality check, evaluates to False.
After branch/comparison/jump:
[[ 0  0  3  4  5  6  7  0]
 [ 9 10 11 12 13 14 15 16]
 [17 18 19 20 21 22 23 24]
 [25 26 27 28 29 30 31 32]
 [33 34 35 36 37 38 39 40]
 [41 42 43 44 45 46 47 48]
 [49 50 51 52 53 54 55 56]
 [57 58 59 60 61 62 63 64]]

PC = 201

PC = 202

PC = 203

PC = 204

PC = 205

PC = 206

PC = 207

PC = 208

PC = 209

PC = 210

PC = 211

PC = 212

PC = 213

PC = 214

PC = 215

PC = 216

PC = 217

PC = 218

PC = 219

PC = 220

PC = 221

PC = 222

PC = 223

PC = 224

PC = 225

PC = 226

PC = 227

PC = 228

PC = 229

PC = 230

PC = 231

PC = 232

PC = 233

PC = 234

PC = 235

PC = 236

PC = 237

PC = 238

PC = 239

PC = 240

PC = 241

PC = 242

PC = 243

PC = 244

PC = 245

PC = 246

PC = 247

PC = 248

PC = 249

PC = 250
RHM standard matrix: read host memory [16:17], write to unified buffer [16:17]. Flags? 0
slice is [[129 130 131 132 133 134 135 136]]
slice shape is (1, 8)
given shape is (1, 8)
[[129 130 131 132 133 134 135 136]]
[[129 130 131 132 133 134 135 136]]

PC = 251

PC = 252

PC = 253

PC = 254

PC = 255

PC = 256

PC = 257

PC = 258

PC = 259

PC = 260

PC = 261

PC = 262

PC = 263

PC = 264

PC = 265

PC = 266

PC = 267

PC = 268

PC = 269

PC = 270

PC = 271

PC = 272

PC = 273

PC = 274

PC = 275

PC = 276

PC = 277

PC = 278

PC = 279

PC = 280

PC = 281

PC = 282

PC = 283

PC = 284

PC = 285

PC = 286

PC = 287

PC = 288

PC = 289

PC = 290

PC = 291

PC = 292

PC = 293

PC = 294

PC = 295

PC = 296

PC = 297

PC = 298

PC = 299

PC = 300
H A L T
MMC Count: 1
HM Count: 2
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 6_eq_check_neq passed
Testing 15_rhm_pc_ret
Simulation terminated at cycle 100
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM pc return: create curent pc vector, write to unified buffer [8]. Flags? 2
[[ 0. 52.  0.  0.  0.  0.  0.  4.]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
H A L T
MMC Count: 0
HM Count: 1
ACT Count: 0
RW Count: 0
RW Reloads: 0
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test failed (ubuffer)
Control:
[[ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0 52  0  0  0  0  0  4]] uint32 (9, 8)
Test:
[[ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0  0  0  0  0  0  0  0]
 [ 0 53  0  0  0  0  0  4]] int64 (9, 8)
row 8: Control: [ 0 52  0  0  0  0  0  4], Test: [ 0 53  0  0  0  0  0  4]
Test 15_rhm_pc_ret failed
Testing 10_jump_forward
Simulation terminated at cycle 202
PC = 0

PC = 1

PC = 2

PC = 3

PC = 4

PC = 5

PC = 6

PC = 7

PC = 8

PC = 9

PC = 10

PC = 11

PC = 12

PC = 13

PC = 14

PC = 15

PC = 16

PC = 17

PC = 18

PC = 19

PC = 20

PC = 21

PC = 22

PC = 23

PC = 24

PC = 25

PC = 26

PC = 27

PC = 28

PC = 29

PC = 30

PC = 31

PC = 32

PC = 33

PC = 34

PC = 35

PC = 36

PC = 37

PC = 38

PC = 39

PC = 40

PC = 41

PC = 42

PC = 43

PC = 44

PC = 45

PC = 46

PC = 47

PC = 48

PC = 49

PC = 50
RHM standard matrix: read host memory [0:8], write to unified buffer [0:8]. Flags? 0
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]

PC = 51

PC = 52

PC = 53

PC = 54

PC = 55

PC = 56

PC = 57

PC = 58

PC = 59

PC = 60

PC = 61

PC = 62

PC = 63

PC = 64

PC = 65

PC = 66

PC = 67

PC = 68

PC = 69

PC = 70

PC = 71

PC = 72

PC = 73

PC = 74

PC = 75

PC = 76

PC = 77

PC = 78

PC = 79

PC = 80

PC = 81

PC = 82

PC = 83

PC = 84

PC = 85

PC = 86

PC = 87

PC = 88

PC = 89

PC = 90

PC = 91

PC = 92

PC = 93

PC = 94

PC = 95

PC = 96

PC = 97

PC = 98

PC = 99

PC = 100
RW 0: read weight matrix 0 into weight FIFO
[[  1 350   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]

PC = 101

PC = 102

PC = 103

PC = 104

PC = 105

PC = 106

PC = 107

PC = 108

PC = 109

PC = 110

PC = 111

PC = 112

PC = 113

PC = 114

PC = 115

PC = 116

PC = 117

PC = 118

PC = 119

PC = 120

PC = 121

PC = 122

PC = 123

PC = 124

PC = 125

PC = 126

PC = 127

PC = 128

PC = 129

PC = 130

PC = 131

PC = 132

PC = 133

PC = 134

PC = 135

PC = 136

PC = 137

PC = 138

PC = 139

PC = 140

PC = 141

PC = 142

PC = 143

PC = 144

PC = 145

PC = 146

PC = 147

PC = 148

PC = 149

PC = 150
MMC: multiply UB[0:8] with a weight, store in ACC[0:8]
slice is [[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
slice shape is (8, 8)
given shape is (8, 8)
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC matrix: 
[[1 0 0 0 0 0 0 0]
 [0 1 0 0 0 0 0 0]
 [0 0 1 0 0 0 0 0]
 [0 0 0 1 0 0 0 0]
 [0 0 0 0 1 0 0 0]
 [0 0 0 0 0 1 0 0]
 [0 0 0 0 0 0 1 0]
 [0 0 0 0 0 0 0 1]]
MMC weight: 
[[  1 350   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
MMC output: 
[[  1 350   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
Accumulating with ACC[0:8]
[[0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]
 [0 0 0 0 0 0 0 0]]
After MMC + ACC: 
[[  1 350   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]

PC = 151

PC = 152

PC = 153

PC = 154

PC = 155

PC = 156

PC = 157

PC = 158

PC = 159

PC = 160

PC = 161

PC = 162

PC = 163

PC = 164

PC = 165

PC = 166

PC = 167

PC = 168

PC = 169

PC = 170

PC = 171

PC = 172

PC = 173

PC = 174

PC = 175

PC = 176

PC = 177

PC = 178

PC = 179

PC = 180

PC = 181

PC = 182

PC = 183

PC = 184

PC = 185

PC = 186

PC = 187

PC = 188

PC = 189

PC = 190

PC = 191

PC = 192

PC = 193

PC = 194

PC = 195

PC = 196

PC = 197

PC = 198

PC = 199

PC = 200
ACT: read ACC[0:8], and write to UB[8:16]. Activation function: slice is [[  1 350   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
slice shape is (8, 8)
given shape is (8, 8)
[[  1 350   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
Before activation:
[[  1 350   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
After activation:
[[  1 350   3   4   5   6   7   4]
 [  9  10  11  12  13  14  15  16]
 [ 17  18  19  20  21  22  23  24]
 [ 25  26  27  28  29  30  31  32]
 [ 33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48]
 [ 49  50  51  52  53  54  55  56]
 [ 57  58  59  60  61  62  63  64]]
Unconditional jump from 200 to 350. No write to UB.

PC = 350
H A L T
MMC Count: 1
HM Count: 1
ACT Count: 1
RW Count: 1
RW Reloads: 1
PC history:
 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 350]

ALL DONE!
        (•_•)
        ( •_•)>⌐■-■
        (⌐■_■)
Test 10_jump_forward passed
